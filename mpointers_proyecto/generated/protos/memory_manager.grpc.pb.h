// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: memory_manager.proto
// Original file comments:
// protos/memory_manager.proto
#ifndef GRPC_memory_5fmanager_2eproto__INCLUDED
#define GRPC_memory_5fmanager_2eproto__INCLUDED

#include "memory_manager.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace memory_manager {

class MemoryManager final {
 public:
  static constexpr char const* service_full_name() {
    return "memory_manager.MemoryManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Crea un bloque de memoria y retorna su ID
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::memory_manager::CreateRequest& request, ::memory_manager::CreateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::CreateReply>> AsyncCreate(::grpc::ClientContext* context, const ::memory_manager::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::CreateReply>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::CreateReply>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::memory_manager::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::CreateReply>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    // Almacena un valor en un bloque de memoria
    virtual ::grpc::Status Set(::grpc::ClientContext* context, const ::memory_manager::SetRequest& request, ::memory_manager::SetReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::SetReply>> AsyncSet(::grpc::ClientContext* context, const ::memory_manager::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::SetReply>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::SetReply>> PrepareAsyncSet(::grpc::ClientContext* context, const ::memory_manager::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::SetReply>>(PrepareAsyncSetRaw(context, request, cq));
    }
    // Obtiene el valor de un bloque de memoria
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::memory_manager::GetRequest& request, ::memory_manager::GetReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::GetReply>> AsyncGet(::grpc::ClientContext* context, const ::memory_manager::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::GetReply>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::GetReply>> PrepareAsyncGet(::grpc::ClientContext* context, const ::memory_manager::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::GetReply>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // Incrementa el contador de referencias
    virtual ::grpc::Status IncreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::memory_manager::RefCountReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>> AsyncIncreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>>(AsyncIncreaseRefCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>> PrepareAsyncIncreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>>(PrepareAsyncIncreaseRefCountRaw(context, request, cq));
    }
    // Decrementa el contador de referencias
    virtual ::grpc::Status DecreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::memory_manager::RefCountReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>> AsyncDecreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>>(AsyncDecreaseRefCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>> PrepareAsyncDecreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>>(PrepareAsyncDecreaseRefCountRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Crea un bloque de memoria y retorna su ID
      virtual void Create(::grpc::ClientContext* context, const ::memory_manager::CreateRequest* request, ::memory_manager::CreateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::memory_manager::CreateRequest* request, ::memory_manager::CreateReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Almacena un valor en un bloque de memoria
      virtual void Set(::grpc::ClientContext* context, const ::memory_manager::SetRequest* request, ::memory_manager::SetReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Set(::grpc::ClientContext* context, const ::memory_manager::SetRequest* request, ::memory_manager::SetReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Obtiene el valor de un bloque de memoria
      virtual void Get(::grpc::ClientContext* context, const ::memory_manager::GetRequest* request, ::memory_manager::GetReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::memory_manager::GetRequest* request, ::memory_manager::GetReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Incrementa el contador de referencias
      virtual void IncreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Decrementa el contador de referencias
      virtual void DecreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::CreateReply>* AsyncCreateRaw(::grpc::ClientContext* context, const ::memory_manager::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::CreateReply>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::memory_manager::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::SetReply>* AsyncSetRaw(::grpc::ClientContext* context, const ::memory_manager::SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::SetReply>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::memory_manager::SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::GetReply>* AsyncGetRaw(::grpc::ClientContext* context, const ::memory_manager::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::GetReply>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::memory_manager::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>* AsyncIncreaseRefCountRaw(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>* PrepareAsyncIncreaseRefCountRaw(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>* AsyncDecreaseRefCountRaw(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memory_manager::RefCountReply>* PrepareAsyncDecreaseRefCountRaw(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Create(::grpc::ClientContext* context, const ::memory_manager::CreateRequest& request, ::memory_manager::CreateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::CreateReply>> AsyncCreate(::grpc::ClientContext* context, const ::memory_manager::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::CreateReply>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::CreateReply>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::memory_manager::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::CreateReply>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Set(::grpc::ClientContext* context, const ::memory_manager::SetRequest& request, ::memory_manager::SetReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::SetReply>> AsyncSet(::grpc::ClientContext* context, const ::memory_manager::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::SetReply>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::SetReply>> PrepareAsyncSet(::grpc::ClientContext* context, const ::memory_manager::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::SetReply>>(PrepareAsyncSetRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::memory_manager::GetRequest& request, ::memory_manager::GetReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::GetReply>> AsyncGet(::grpc::ClientContext* context, const ::memory_manager::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::GetReply>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::GetReply>> PrepareAsyncGet(::grpc::ClientContext* context, const ::memory_manager::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::GetReply>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status IncreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::memory_manager::RefCountReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>> AsyncIncreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>>(AsyncIncreaseRefCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>> PrepareAsyncIncreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>>(PrepareAsyncIncreaseRefCountRaw(context, request, cq));
    }
    ::grpc::Status DecreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::memory_manager::RefCountReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>> AsyncDecreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>>(AsyncDecreaseRefCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>> PrepareAsyncDecreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>>(PrepareAsyncDecreaseRefCountRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::memory_manager::CreateRequest* request, ::memory_manager::CreateReply* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::memory_manager::CreateRequest* request, ::memory_manager::CreateReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Set(::grpc::ClientContext* context, const ::memory_manager::SetRequest* request, ::memory_manager::SetReply* response, std::function<void(::grpc::Status)>) override;
      void Set(::grpc::ClientContext* context, const ::memory_manager::SetRequest* request, ::memory_manager::SetReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::memory_manager::GetRequest* request, ::memory_manager::GetReply* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::memory_manager::GetRequest* request, ::memory_manager::GetReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IncreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response, std::function<void(::grpc::Status)>) override;
      void IncreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DecreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response, std::function<void(::grpc::Status)>) override;
      void DecreaseRefCount(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::memory_manager::CreateReply>* AsyncCreateRaw(::grpc::ClientContext* context, const ::memory_manager::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memory_manager::CreateReply>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::memory_manager::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memory_manager::SetReply>* AsyncSetRaw(::grpc::ClientContext* context, const ::memory_manager::SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memory_manager::SetReply>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::memory_manager::SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memory_manager::GetReply>* AsyncGetRaw(::grpc::ClientContext* context, const ::memory_manager::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memory_manager::GetReply>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::memory_manager::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>* AsyncIncreaseRefCountRaw(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>* PrepareAsyncIncreaseRefCountRaw(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>* AsyncDecreaseRefCountRaw(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memory_manager::RefCountReply>* PrepareAsyncDecreaseRefCountRaw(::grpc::ClientContext* context, const ::memory_manager::RefCountRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Set_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_IncreaseRefCount_;
    const ::grpc::internal::RpcMethod rpcmethod_DecreaseRefCount_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Crea un bloque de memoria y retorna su ID
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::memory_manager::CreateRequest* request, ::memory_manager::CreateReply* response);
    // Almacena un valor en un bloque de memoria
    virtual ::grpc::Status Set(::grpc::ServerContext* context, const ::memory_manager::SetRequest* request, ::memory_manager::SetReply* response);
    // Obtiene el valor de un bloque de memoria
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::memory_manager::GetRequest* request, ::memory_manager::GetReply* response);
    // Incrementa el contador de referencias
    virtual ::grpc::Status IncreaseRefCount(::grpc::ServerContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response);
    // Decrementa el contador de referencias
    virtual ::grpc::Status DecreaseRefCount(::grpc::ServerContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memory_manager::CreateRequest* /*request*/, ::memory_manager::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::memory_manager::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::memory_manager::CreateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Set() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memory_manager::SetRequest* /*request*/, ::memory_manager::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::memory_manager::SetRequest* request, ::grpc::ServerAsyncResponseWriter< ::memory_manager::SetReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memory_manager::GetRequest* /*request*/, ::memory_manager::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::memory_manager::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::memory_manager::GetReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncreaseRefCount(::grpc::ServerContext* context, ::memory_manager::RefCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::memory_manager::RefCountReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecreaseRefCount(::grpc::ServerContext* context, ::memory_manager::RefCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::memory_manager::RefCountReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Set<WithAsyncMethod_Get<WithAsyncMethod_IncreaseRefCount<WithAsyncMethod_DecreaseRefCount<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::memory_manager::CreateRequest, ::memory_manager::CreateReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memory_manager::CreateRequest* request, ::memory_manager::CreateReply* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::memory_manager::CreateRequest, ::memory_manager::CreateReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memory_manager::CreateRequest, ::memory_manager::CreateReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memory_manager::CreateRequest* /*request*/, ::memory_manager::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::memory_manager::CreateRequest* /*request*/, ::memory_manager::CreateReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Set() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::memory_manager::SetRequest, ::memory_manager::SetReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memory_manager::SetRequest* request, ::memory_manager::SetReply* response) { return this->Set(context, request, response); }));}
    void SetMessageAllocatorFor_Set(
        ::grpc::MessageAllocator< ::memory_manager::SetRequest, ::memory_manager::SetReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memory_manager::SetRequest, ::memory_manager::SetReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memory_manager::SetRequest* /*request*/, ::memory_manager::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::memory_manager::SetRequest* /*request*/, ::memory_manager::SetReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::memory_manager::GetRequest, ::memory_manager::GetReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memory_manager::GetRequest* request, ::memory_manager::GetReply* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::memory_manager::GetRequest, ::memory_manager::GetReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memory_manager::GetRequest, ::memory_manager::GetReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memory_manager::GetRequest* /*request*/, ::memory_manager::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::memory_manager::GetRequest* /*request*/, ::memory_manager::GetReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::memory_manager::RefCountRequest, ::memory_manager::RefCountReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response) { return this->IncreaseRefCount(context, request, response); }));}
    void SetMessageAllocatorFor_IncreaseRefCount(
        ::grpc::MessageAllocator< ::memory_manager::RefCountRequest, ::memory_manager::RefCountReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memory_manager::RefCountRequest, ::memory_manager::RefCountReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IncreaseRefCount(
      ::grpc::CallbackServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::memory_manager::RefCountRequest, ::memory_manager::RefCountReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memory_manager::RefCountRequest* request, ::memory_manager::RefCountReply* response) { return this->DecreaseRefCount(context, request, response); }));}
    void SetMessageAllocatorFor_DecreaseRefCount(
        ::grpc::MessageAllocator< ::memory_manager::RefCountRequest, ::memory_manager::RefCountReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memory_manager::RefCountRequest, ::memory_manager::RefCountReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DecreaseRefCount(
      ::grpc::CallbackServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Create<WithCallbackMethod_Set<WithCallbackMethod_Get<WithCallbackMethod_IncreaseRefCount<WithCallbackMethod_DecreaseRefCount<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memory_manager::CreateRequest* /*request*/, ::memory_manager::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Set() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memory_manager::SetRequest* /*request*/, ::memory_manager::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memory_manager::GetRequest* /*request*/, ::memory_manager::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memory_manager::CreateRequest* /*request*/, ::memory_manager::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Set() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memory_manager::SetRequest* /*request*/, ::memory_manager::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memory_manager::GetRequest* /*request*/, ::memory_manager::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncreaseRefCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecreaseRefCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memory_manager::CreateRequest* /*request*/, ::memory_manager::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Set() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Set(context, request, response); }));
    }
    ~WithRawCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memory_manager::SetRequest* /*request*/, ::memory_manager::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memory_manager::GetRequest* /*request*/, ::memory_manager::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IncreaseRefCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IncreaseRefCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DecreaseRefCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DecreaseRefCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memory_manager::CreateRequest, ::memory_manager::CreateReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memory_manager::CreateRequest, ::memory_manager::CreateReply>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memory_manager::CreateRequest* /*request*/, ::memory_manager::CreateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memory_manager::CreateRequest,::memory_manager::CreateReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Set() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memory_manager::SetRequest, ::memory_manager::SetReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memory_manager::SetRequest, ::memory_manager::SetReply>* streamer) {
                       return this->StreamedSet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memory_manager::SetRequest* /*request*/, ::memory_manager::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memory_manager::SetRequest,::memory_manager::SetReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memory_manager::GetRequest, ::memory_manager::GetReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memory_manager::GetRequest, ::memory_manager::GetReply>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memory_manager::GetRequest* /*request*/, ::memory_manager::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memory_manager::GetRequest,::memory_manager::GetReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memory_manager::RefCountRequest, ::memory_manager::RefCountReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memory_manager::RefCountRequest, ::memory_manager::RefCountReply>* streamer) {
                       return this->StreamedIncreaseRefCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIncreaseRefCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memory_manager::RefCountRequest,::memory_manager::RefCountReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memory_manager::RefCountRequest, ::memory_manager::RefCountReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memory_manager::RefCountRequest, ::memory_manager::RefCountReply>* streamer) {
                       return this->StreamedDecreaseRefCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memory_manager::RefCountRequest* /*request*/, ::memory_manager::RefCountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDecreaseRefCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memory_manager::RefCountRequest,::memory_manager::RefCountReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_IncreaseRefCount<WithStreamedUnaryMethod_DecreaseRefCount<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_IncreaseRefCount<WithStreamedUnaryMethod_DecreaseRefCount<Service > > > > > StreamedService;
};

}  // namespace memory_manager


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_memory_5fmanager_2eproto__INCLUDED
